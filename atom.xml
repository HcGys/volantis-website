<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>且听风吟</title>
  <icon>https://volantis.listentothewind.cn/icon/android-chrome-192x192.png</icon>
  <subtitle>猫和它的小小窝</subtitle>
  <link href="https://volantis.listentothewind.cn/atom.xml" rel="self"/>
  
  <link href="https://volantis.listentothewind.cn/"/>
  <updated>2023-02-03T03:20:00.000Z</updated>
  <id>https://volantis.listentothewind.cn/</id>
  
  <author>
    <name>且听风吟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uBlacklist：拯救你的搜索结果</title>
    <link href="https://volantis.listentothewind.cn/post/8204c0ab/"/>
    <id>https://volantis.listentothewind.cn/post/8204c0ab/</id>
    <published>2022-11-19T07:00:00.000Z</published>
    <updated>2023-02-03T03:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知你是否有这样的经历，在搜索引擎查找某一问题时，点击相应搜索结果时不是你所需甚至大相径庭的内容。比如你点进了一个 CSDN 的链接，出现的却是相似的重复内容，更有甚者直接是另一篇文章的链接；再比如点进去却发现内容排版糟糕、代码块缩减完全没有，页面侧栏、底栏又充斥着好长一串的猜你喜欢、推荐文章，仔细一看豁然是个采集站。</p><p>如果说这些还是小打小闹，那不知你是否遇到过云厂商的邀稿，许诺只要迁移文章就赠送优惠券云云，殊不知这类大厂权重高排名靠前，迁移后整个一搜索全是他们的内容，但内容上又容易和采集站一样排版欠佳。</p><h2 id="一、uBlacklist">一、uBlacklist</h2><p>中文搜索不知不觉间变的相当糟糕了，找不到需要的内容。一眼望去，相似、无关的内容又排在前列。有时候真的想对搜索结果进行过滤，把不喜欢/需要的内容去除，而这正是 uBlacklist 所做的事。</p><p>具体的说，uBlacklist 支持 Google, Bing, Brave 等搜索引擎的结果过滤，我们可以使用 <strong>匹配模式<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></strong> 或 <strong>正则表达式<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></strong> 对搜索结果进行过滤，直接拒绝查看低质量内容。其扩展下载地址为：</p><div class="tag link"><a class="link-card" title="uBlacklist" href="https://chrome.google.com/webstore/detail/ublacklist/pncfbmialoiaghdehhbnbhkkgmjanfhe?hl=zh-CN"><div class="left"><img src="/img/default/chrome.png"/></div><div class="right"><p class="text">uBlacklist</p><p class="url">https://chrome.google.com/webstore/detail/ublacklist/pncfbmialoiaghdehhbnbhkkgmjanfhe?hl=zh-CN</p></div></a></div><h2 id="二、过滤规则">二、过滤规则</h2><p>这里是一些常用的规则推荐，原则上排除名单因人而异，根据实际需求自行选取。</p><h3 id="1-基础屏蔽列表">1. 基础屏蔽列表</h3><ul><li>屏蔽 http 站点</li></ul><pre><code>/(http:\/\/.*)/</code></pre><ul><li>屏蔽移动端（桌面端不看移动端排版内容！！！）</li></ul><pre><code>/.*:\/\/(wap|m)\..*/</code></pre><ul><li>屏蔽搜索列表（点进去是一个搜索列表页面，鸡肋的一批）</li></ul><pre><code>/.*\?q=.*//.*\?s=.*//.*\?keyword=.*//.*collections\/.*\?.*/*://*/s/**://*/so/**://*/so.php*://*/informat/**://*/zhuanti/**://*/keyword/**://*/*/searchList.jsp?**://*/*dictionary?p=*</code></pre><ul><li>屏蔽云厂商文章（抓取类文章较多）</li></ul><pre><code>*://cloud.tencent.com/developer/article/**://developer.aliyun.com/article/**://bbs.huaweicloud.com/blogs/**://www.ucloud.cn/yun/*.html*://www.yisu.com/zixun/**://www.huoban.com/news/post/*</code></pre><h3 id="2-激进屏蔽列表">2. 激进屏蔽列表</h3><ul><li>不会有博主以程序员/开发者当作网站名称的一部分吧？<br><em>可能误拦截形如『开发者平台』名称的网站</em></li></ul><pre><code>title/^.*(程序员|开发者).*/</code></pre><ul><li>原则上大概率是采集站（存在误伤可能性）</li></ul><pre><code>title/^.*(学习|学识|资讯|知识)$/</code></pre><ul><li>谷歌的搜索结果出现了好多繁体字结果，我有些不想看…</li></ul><pre><code>/.*\.(hk|tw|taipei)\/.*/</code></pre><h3 id="3-讨厌的网站">3. 讨厌的网站</h3><ul><li>CSDN、简书、Gitee 的仓库推荐页</li></ul><pre><code>*://*.csdn.net/**://*.jianshu.com/**://*.juejin.cn/**://*.php.cn/**://*.51cto.com/**://*.gitee.com/explore/*</code></pre><ul><li>百家号、百度知道、搜狐、头条</li></ul><pre><code>*://baijiahao.baidu.com/**://zhidao.baidu.com/**://wapiknow.baidu.com/**://www.sohu.com/a/**://www.toutiao.com/article/*</code></pre><ul><li>不看抖音视频、文章；番茄阅读最离谱：描述部分和搜索词相关，但点进去是小说。</li></ul><pre><code>*://*.douyin.com/video/**://*.163.com/dy/article/**://*.fanqienovel.com/page/*</code></pre><h2 id="三、终结内容农场">三、终结内容农场</h2><p>相对来说，uBlacklist 直接隐藏搜索结果，在不点击显示前无法查看被过滤的条目，这就需要过滤名单准确性较高，经常维护，但名单一长维护成本就很大，所以这里还可以搭配另一类浏览器插件：<a href="https://danny0838.github.io/content-farm-terminator/zh/">终结内容农场</a>。</p><p>终结内容农场更倾向于拦截链接、标识内容农场，它不会主动隐藏结果：</p><details yellow><summary> 内容农场拦截演示 </summary>              <div class='content'>              <p><img src="../../img/article/22-11@%E8%BF%87%E6%BB%A4%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C/image-20221118093232664.png" alt="内容农场拦截演示"></p>              </div>            </details><p>如上图，试图访问的网站为快懂百科，被插件的默认屏蔽列表拦截（<em>个人认为该网站不完全算是内容农场网站</em>），用户可以选择解锁查看网站内容的。但倘若是在 uBlacklist 的拦截名单中，那就真看不到这个结果啦。</p><p>两相搭配，效果更佳。<svg class="iconfont emoji" aria-hidden="true"><use xlink:href="#icon-ziya"></use></svg></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Add-ons/WebExtensions/Match_patterns">匹配模式</a>是一种指定网址组的方法：一个匹配模式匹配特定的一组 URL。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式</a>是用于匹配字符串中字符组合的模式。 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">uBlacklist 可以对搜索结果进行过滤，屏蔽不喜欢/需要的搜索内容，支持谷歌/必应等搜索引擎。</summary>
    
    
    
    <category term="教程" scheme="https://volantis.listentothewind.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="浏览器扩展" scheme="https://volantis.listentothewind.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/"/>
    
    <category term="过滤" scheme="https://volantis.listentothewind.cn/tags/%E8%BF%87%E6%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>评论区表情包放大</title>
    <link href="https://volantis.listentothewind.cn/post/17e0ee16/"/>
    <id>https://volantis.listentothewind.cn/post/17e0ee16/</id>
    <published>2022-10-23T14:00:00.000Z</published>
    <updated>2022-10-24T15:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一般情况下评论区的表情宽和高是固定显示，所以有些尺寸相对较大的表情包是缩放显示的，模糊不说还可能导致误解表情包的含义，本教程为表情图案添加了一个简单的放大弹出层，非常的实用。</p><h2 id="教程">教程</h2><p>其实实现的原理很简单，就是创建一个盒子，将表情包的内容放在盒子里面，再读取图片的 Alt 等描述属性现在在盒子中，最后控制盒子位置和显示隐藏即可。而在表情包放大逻辑方面，基本属性为：2 倍放大显示，最大显示宽高为 200px（如若超过，按比例对应缩小）。</p><p><img src="../../img/article/22-09@%E8%AF%84%E8%AE%BA%E5%8C%BA%E8%A1%A8%E6%83%85%E5%8C%85%E6%94%BE%E5%A4%A7/image-20220918193029346.png" alt="表情包逻辑"></p><h3 id="实现">实现</h3><p>具体到实现，就是利用 <code>observer</code> 观察评论区元素新增的节点，根据相关选择器过滤出含表情包的节点，添加对应的事件，以 Artalk 评论系统为例处理到的选择器为：</p><pre><code class="language-js">/** * 放大项： * ① 表情包选择 * ② 评论内容 * ③ 预览窗（只有一张图） * ④ 预览窗（任意） */const dom = mutations[i].addedNodesif(dom[0]?.classList?.contains('atk-grp')  || dom[0]?.classList?.contains('atk-comment-wrap')  || (!!dom[0]?.attributes &amp;&amp; !!dom[0]?.attributes['atk-emoticon'])  || (typeof dom[0]?.querySelector === 'function' &amp;&amp; dom[0]?.querySelector('img[atk-emoticon]'))) &#123;  dom[0].onmouseover = (e) =&gt; &#123;    //......  &#125;&#125;</code></pre><p>对应的，如果是 Twikoo 评论系统，相应需要修改为：</p><pre><code class="language-js">let owo_body = ''const dom = mutations[i].addedNodesif (dom.length == 2 &amp;&amp; dom[1].className == 'OwO-body') owo_body = dom[1]else if (dom.length == 1 &amp;&amp; dom[0].className == 'tk-comment') owo_body = dom[0]else continueowo_body.onmouseover = (e) =&gt; &#123;  //.......&#125;</code></pre><h3 id="代码">代码</h3><details cyan><summary> JavaScript </summary>              <div class='content'>              <pre><code class="language-js">/** * 表情包放大 * @param target 表情包 DOM */function showOwoBig(target) {  const ratio = 2  const maxLength = 200  const body = document.querySelector('body')  let div = document.createElement('div')  if (document.querySelector('#owo-big')) {    div = document.querySelector('#owo-big')  } else {    div.id = 'owo-big'    body.appendChild(div)  }  const observer = new MutationObserver(mutations =&gt; {    for (let i = 0; i &lt; mutations.length; i++){      let flag = 1      let owoTime = 0      const dom = mutations[i].addedNodes      if(dom[0]?.classList?.contains('atk-grp')          || dom[0]?.classList?.contains('atk-comment-wrap')          || (!!dom[0]?.attributes &amp;&amp; !!dom[0]?.attributes['atk-emoticon'])          || (typeof dom[0]?.querySelector === 'function' &amp;&amp; dom[0]?.querySelector('img[atk-emoticon]'))) {        dom[0].onmouseover = (e) =&gt; {          // 如果需要只放大表情包可以添加  &amp;&amp; !!e.target.attributes['atk-emoticon']          if (flag &amp;&amp; e.target.tagName === 'IMG') {            flag = 0;            owoTime = setTimeout(() =&gt; {              const alt = e.path[0].alt || '';              const clientHeight = e.path[0].clientHeight              const clientWidth = e.path[0].clientWidth              if(clientHeight &lt;= maxLength &amp;&amp; clientWidth &lt;= maxLength) {                const naturalHeight = e.path[0].naturalHeight                const naturalWidth = e.path[0].naturalWidth                const zoomHeight = clientHeight * ratio                const zoomWidth = clientWidth * ratio                const height = naturalHeight &gt; clientHeight ?  zoomHeight &lt; naturalHeight &amp;&amp; naturalHeight &lt; maxLength ? zoomHeight : naturalHeight : clientHeight                const width = naturalWidth &gt; clientWidth ? zoomWidth &lt; naturalWidth &amp;&amp; naturalWidth &lt; maxLength ? zoomWidth : naturalWidth : clientWidth                let tempWidth = 0;                let tempHeight = 0;                if(width / height &gt;= 1) {                  if(width &gt;= maxLength) {                    tempWidth = maxLength                    tempHeight = (height * maxLength) / width                  } else {                    tempWidth = width                    tempHeight = height                  }                } else {                  if(height &gt;= maxLength) {                    tempHeight = maxLength                    tempWidth = (width * maxLength) / height                  } else {                    tempWidth = width                    tempHeight = height                  }                }                const top = e.y - e.offsetY                let  left = (e.x - e.offsetX) - (tempWidth - e.path[0].clientWidth) / 2                if ((left + tempWidth) &gt; body.clientWidth) left -= ((left + tempWidth) - body.clientWidth + 10)                if (left &lt; 0) left = 10                if (alt !== '') tempHeight += 10                div.style.cssText = `display:block;height:${tempHeight+34}px;width:${tempWidth+34}px;left:${left}px;top:${top}px;`;                div.innerHTML = `&lt;img src=&quot;${e.target.src}&quot;&gt;&lt;p&gt;${alt}&lt;/p&gt;`              }            }, 300);          }        };        dom[0].onmouseout = () =&gt; {          flag = 1          div.style.display = 'none'          clearTimeout(owoTime)        }      }    }  })  observer.observe(target, { subtree: true, childList: true }) // 监听的 元素 和 配置项}</code></pre>              </div>            </details><details cyan><summary> CSS </summary>              <div class='content'>              <pre><code class="language-css">#owo-big {  position: fixed;  align-items: center;  background-color: #ffffff;  border: 1px #aaa solid;  border-radius: 10px;  z-index: 9999;  display: none;  transform: translate(0, -105%);  overflow: hidden;  animation: owoIn 0.3s cubic-bezier(0.42, 0, 0.3, 1.11);  padding: 16px;}#owo-big img {  width: 100%;  border-radius: 10px;}#owo-big p {  text-overflow: ellipsis;  white-space: nowrap;  overflow: hidden;  text-align: center;  font-size: 12px;  margin: 0;}@keyframes owoIn {  0% {    transform: translate(0, -95%);    opacity: 0;  }  100% {    transform: translate(0, -105%);    opacity: 1;  }}</code></pre>              </div>            </details>]]></content>
    
    
    <summary type="html">为评论区的表情包添加一个放大弹出层，解决显示过小不清晰的问题。</summary>
    
    
    
    <category term="教程" scheme="https://volantis.listentothewind.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Artalk" scheme="https://volantis.listentothewind.cn/tags/Artalk/"/>
    
  </entry>
  
  <entry>
    <title>使用 MeiliSearch 实现 Hexo 博客搜索</title>
    <link href="https://volantis.listentothewind.cn/post/19f14ef1/"/>
    <id>https://volantis.listentothewind.cn/post/19f14ef1/</id>
    <published>2022-09-02T15:00:00.000Z</published>
    <updated>2022-09-04T04:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录 MeiliSearch 的搭建及如何在 Hexo 博客上使用，原则上来说，MeiliSearch 在前端搜索上使用了公共开源的 <a href="https://github.com/algolia/instantsearch.js">instantsearch.js</a> 项目，这个项目是由 Aligolia 维护，所以在前端页面上的使用流程与 Aligolia 大差不差。在后端部署层面，MeiliSearch  作为一个 Rust 项目支持的操作系统很多，同时也支持一键部署至相应云服务中。</p><h2 id="一、部署">一、部署</h2><p>作为一个自部署搜索引擎，除了个人服务器外还支持部署到诸如 <a href="https://docs.meilisearch.com/learn/cookbooks/railway.html">Railway</a>, <a href="https://docs.meilisearch.com/learn/cookbooks/koyeb.html">Koyeb</a> 等这类云服务中，此部分查阅对应文档即可，本文侧重于个人服务器上的部署流程。</p><h3 id="1-程序安装">1. 程序安装</h3><p>根据官方提供的安装命令，在一个你喜欢的目录下执行如下命令。</p><pre><code class="language-sh">curl -L https://install.meilisearch.com | sh</code></pre><blockquote><p>实际上脚本是在判断操作系统环境，然后去 <a href="https://github.com/meilisearch/meilisearch/releases">Github Releases</a> 下载对应的发行包，所以这里你可以手动下载你服务器所需发行包后自行上传至相关目录，最后将程序名称更改为 <em>meilisearch</em>  即可。</p></blockquote><h3 id="2-程序配置">2. 程序配置</h3><p>一些基础的命令行配置，摘自：<a href="https://docs.meilisearch.com/learn/configuration/instance_options.html#command-line-options-and-flags">Configure Meilisearch at launch</a></p><table><thead><tr><th>Command</th><th>CLI option</th><th>Remark</th></tr></thead><tbody><tr><td>自定义端口</td><td>–http-addr</td><td>更改程序端口</td></tr><tr><td>主密钥</td><td>–master-key</td><td>生产环境下必须配置，也可用来管理各类其他密钥</td></tr><tr><td>环境</td><td>–env</td><td>用于设置生产/开发环境，生产环境会关掉默认的 Web 搜索页面</td></tr><tr><td>分析</td><td>–no-analytics</td><td>MeiliSearch 会上传一定的分析数据，<a href="https://docs.meilisearch.com/learn/what_is_meilisearch/telemetry.html#exhaustive-list-of-all-collected-data">收集数据列表</a></td></tr></tbody></table><h3 id="3-反代运行">3. 反代运行</h3><p>宝塔面板的网站选项卡更新出了其他项目选项，一切以偷懒为目的，此处使用这里进行配置。</p><p>点击<strong>添加通用项目</strong>，填写相应内容，下列为执行命令一项的内容举例：</p><pre><code class="language-sh">/opt/meilisearch/meilisearch --http-addr '127.0.0.1:8772' --master-key 'xxxx' --env production --no-analytics</code></pre><blockquote><p>注：宝塔这里的停止项目按钮似乎有点问题，有时候只能停网站，程序却还在运行。<br>自行根据端口号查找后关闭吧：<code>sudo netstat -tunlp | grep 8772</code></p></blockquote><h2 id="二、数据集">二、数据集</h2><p><img src="../../img/article/22-09@%E8%87%AA%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/document_structure.svg" alt="Diagram illustration Meilisearch's document structure"></p><p>类比的简单理解，MeiliSearch 里数据集合被称作 Documents，index 相当于表名，同时还需要一个 Primary key 区别数据。所以为了能在 Hexo 博客上使用该搜素引擎，流程就很明确了：</p><ol><li><p>在 MeiliSearch 中创建表 indexs；</p></li><li><p>准备博客的所有内容数据 Documents（json/ndjson/csv）;</p></li><li><p>设置需要搜索的内容。</p></li></ol><p>第 1 和 3 步调用 MeiliSearch 的相关接口即可，第 2 步的数据集合则需要我们自行准备，一般的该数据集合至少包含：<strong>标题</strong>、<strong>内容</strong>、<strong>地址</strong>以及 MeiliSearch 所需的<strong>主键</strong>。</p><h3 id="1-主键">1. 主键</h3><p>先解决主键，保证每篇文章拥有一个唯一值，秉着有现成就绝不自己写、能偷懒就偷懒的态度，找到了 <a href="https://github.com/chekun/hexo-uuid">chekun/hexo-uuid</a> 这个插件，安装后能够在 <code>post/page</code> 页面中自动生成 <code>uuid</code> 值。</p><pre><code class="language-sh">npm install hexo-uuid</code></pre><div class="note warning"><p>注：hexo-uuid 实际上是使用 <code>uuid.v1()</code> 根据时间戳在 <code>before_renderPost</code> 阶段时生成写入。<br>对于 MeiliSearch，相同的主键在上传时视为更新，不同时视为新增。</p></div><h3 id="2-内容">2. 内容</h3><p>在本地搜索时，用到了 <a href="https://github.com/alexbruno/hexo-generator-json-content">hexo-generator-json-content</a>，按照其说明，改吧改吧配置可以直接拿过来给 MeiliSearch 使用，计划通 <svg class="iconfont emoji" aria-hidden="true"><use xlink:href="#icon-tiaopi"></use></svg>。</p><pre><code class="language-sh">npm i hexo-generator-json-content</code></pre><p>安装完成插件后，至少需要修改配置文件为如下内容：</p><pre><code class="language-yaml">jsonContent:   meta: false   pages: false   posts:     title: true     path: true     text: true     uuid: true</code></pre><p>这里的 uuid 便是上面 hexo-uuid 在文章中所生成的唯一值，事实上拿 <strong>hexo-abbrlink</strong> 所生成的 <code>abbrlink</code> 也不是说不可以，只要保证唯一性即可。</p><h3 id="3-推送">3. 推送</h3><p>在不修改默认设置的情况下，索引文件默认生成至 <code>/blog/public/content.json</code> 下。MeiliSearch 的上传接口为 <code>/indexes/&#123;index_uid&#125;/documents</code>，对应文档：<a href="https://docs.meilisearch.com/reference/api/documents.html#add-or-replace-documents">Add or replace documents</a>。</p><p>此处利用 Github Action 在每次部署完成时使用 curl 命令推送文件。</p><pre><code class="language-sh">curl -X POST 'https://yoursdomain.com/indexes/hexo/documents/?primaryKey=uuid' \  -H &quot;Authorization: Bearer $&#123;&#123;secrets.MEILISEARCH_KEY&#125;&#125;&quot; \  -H &quot;Content-Type: application/json&quot; \  --data-binary '@public/content.json'</code></pre><h2 id="三、主题适配">三、主题适配</h2><h3 id="1-引用文件">1. 引用文件</h3><pre><code class="language-html">&lt;script src=&quot;https://unpkg.com/@meilisearch/instant-meilisearch/dist/instant-meilisearch.umd.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://unpkg.com/instantsearch.js@4.44/dist/instantsearch.production.min.js&quot;&gt;&lt;/script&gt;</code></pre><h3 id="2-实例化">2. 实例化</h3><p>MeiliSearch 仅在 SearchClient 阶段有所不同：</p><pre><code class="language-js">const search = instantsearch(&#123;  indexName: 'instant_search',  searchClient: instantMeiliSearch(    'https://integration-demos.meilisearch.com',    '99d1e034ed32eb569f9edc27962cccf90b736e4c5a70f7f5e76b9fab54d6a185'  ),&#125;)</code></pre><p>MeiliSearch 可以利用 <a href="https://docs.meilisearch.com/reference/api/keys.html#get-all-keys">/keys</a> 接口获取到 Default Search API Key。</p><p><img src="../../img/article/22-09@%E8%87%AA%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/image-20220903114123344.png" alt="Default Search API Key"></p><h3 id="3-Widgets">3. Widgets</h3><p>部分 Widgets 些许不同，MeiliSerch 可能不支持，相关列表见：<a href="https://github.com/meilisearch/instant-meilisearch#table-of-widgets">Table Of Widgets</a></p><h2 id="四、其它">四、其它</h2><h3 id="1-索引主键">1. 索引主键</h3><p>其实索引主键还可以这样设置，简单粗暴的讲就是<strong>先删后传</strong>：不需要什么插件，直接使用 Hexo 的 <code>_id</code> 即可，然后上传前调用删除接口清空数据库（因为本身每次上传也是全量推送）。</p><pre><code class="language-yaml">jsonContent:   meta: false   pages: false   posts:     title: true     path: true     text: true     _id: true</code></pre><pre><code class="language-yaml">- name: Upload json  run: |    curl -X DELETE 'https://yoursdomain.com/indexes/hexo/documents' \        -H &quot;Authorization: Bearer $&#123;&#123;secrets.MEILISEARCH_KEY&#125;&#125;&quot;    curl -X POST 'https://yoursdomain.com/indexes/hexo/documents' \        -H &quot;Authorization: Bearer $&#123;&#123;secrets.MEILISEARCH_KEY&#125;&#125;&quot; \        -H &quot;Content-Type: application/json&quot; \        --data-binary '@public/content.json'</code></pre><h3 id="2-索引设置">2. 索引设置</h3><p>事实上，上传的字段共有四个，我们只需要对标题和内容进行搜索，另外两个不需要，相应接口文档：<a href="https://docs.meilisearch.com/reference/api/settings.html#update-searchable-attributes">Update searchable attributes</a>。</p><pre><code class="language-sh">curl -X PUT 'https://search.szyink.com//indexes/hexo/settings/searchable-attributes' \  -H 'Content-Type: application/json' \  -H 'Authorization: Bearer xxxxxxxxxxxxxxxxxxxxxxx' \  --data-raw '[&quot;title&quot;, &quot;text&quot;]'</code></pre><h3 id="3-Postman">3. Postman</h3><p>MeiliSearch 提供了一个 API 模板可以导入进 Postman 中，不然老用命令行多麻烦。</p><div class="tag link"><a class="link-card" title="Postman collection for Meilisearch" href="https://docs.meilisearch.com/learn/cookbooks/postman_collection.html#import-the-collection"><div class="left"><img src="/img/default/chrome.png"/></div><div class="right"><p class="text">Postman collection for Meilisearch</p><p class="url">https://docs.meilisearch.com/learn/cookbooks/postman_collection.html#import-the-collection</p></div></a></div><p><img src="../../img/article/22-09@%E8%87%AA%E5%BB%BA%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/image-20220903112249534.png" alt="更改对应参数"></p><h3 id="4-踩坑">4. 踩坑</h3><p>适配时最尝试过 <a href="https://github.com/meilisearch/docs-searchbar.js">docs-searchbar.js</a> 这个项目，他需要先利用 <a href="https://github.com/meilisearch/docs-scraper">docs-scraper</a> 抓取网站接口，然后在生成文档搜索。使用起来一言难尽，配置项特别少，很不灵活，强烈吐槽。</p>]]></content>
    
    
    <summary type="html">本地搜索需要加载文件，博文过多时即消耗流量又浪费时间，Algolia 方案成熟，但是社区版搜索次数有所限制，使用量上来后容易超额，如此自建搜索引擎 MeiliSearch 似乎就是个不错的选择了。</summary>
    
    
    
    <category term="教程" scheme="https://volantis.listentothewind.cn/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://volantis.listentothewind.cn/tags/Hexo/"/>
    
    <category term="MeiliSearch" scheme="https://volantis.listentothewind.cn/tags/MeiliSearch/"/>
    
    <category term="宝塔" scheme="https://volantis.listentothewind.cn/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
</feed>
